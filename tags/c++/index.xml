<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c&#43;&#43; on Esil Blog</title>
    <link>https://aesilevich.github.io/tags/c&#43;&#43;/</link>
    <description>Recent content in c&#43;&#43; on Esil Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 12 Jun 2023 05:00:00 +0000</lastBuildDate><atom:link href="https://aesilevich.github.io/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Использование C&#43;&#43;20 Coroutines для генерации интервалов</title>
      <link>https://aesilevich.github.io/posts/2023-06-12-coroutines-generator/</link>
      <pubDate>Mon, 12 Jun 2023 05:00:00 +0000</pubDate>
      
      <guid>https://aesilevich.github.io/posts/2023-06-12-coroutines-generator/</guid>
      <description>Попробовал использовать C++20 coroutines для генерации интервалов. Выглядит всё довольно неплохо. Вот небольшой пример использования.
Пусть у нас есть класс, содержащий внутри себя вектор уникальных указателей на векторы целых чисел, и некоторые из этих указателей могут быть null. Надо вернуть из функции класса интервал, содержащий все элементы ненулевых векторов и какую-нибудь заданную последовательность (например 10 единиц) для нулевых векторов:
class my_class { public: auto data() const { // ???  } private: std::vector&amp;lt;std::unique_ptr&amp;lt;std::vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt; data_; }; С помощью одной лишь библиотеки ranges эта проблема не имеет простого решения.</description>
    </item>
    
    <item>
      <title>Правильные setters на современном C&#43;&#43;</title>
      <link>https://aesilevich.github.io/posts/2023-03-01-setters/</link>
      <pubDate>Wed, 01 Mar 2023 05:00:00 +0000</pubDate>
      
      <guid>https://aesilevich.github.io/posts/2023-03-01-setters/</guid>
      <description>В старом добром C++03 были довольно простые правила передачи параметров в функции, поэтому никаких вопросов с написанием сеттеров не возникало. Все объекты должны передаваться по константной ссылке, чтобы избежать лишнего копирования, и этот же подход надо было использовать и в сеттерах. Например, типичный сеттер для std::string выглядел вот так:
class my_class { public: void set_name(const std::string &amp;amp; n) { name_ = n; } private: std::string name_; }; Вообще говоря, этот код и раньше вызывал некоторые вопросы.</description>
    </item>
    
    <item>
      <title>Агоритмы с довесками в compile-time</title>
      <link>https://aesilevich.github.io/posts/2023-02-17-region-constexpr/</link>
      <pubDate>Fri, 17 Feb 2023 18:00:00 +0000</pubDate>
      
      <guid>https://aesilevich.github.io/posts/2023-02-17-region-constexpr/</guid>
      <description>Сейчас делал простой класс для кэширования кусков больших данных, полученных из какого-нибудь абстрактного источника данных большого размера. Класс хранит в себе std::map, отображающий смещения в источнике данных в куски закэшированных данных.
Хочется, чтобы в классе была функция, которая по смещению и размеру возвращает вектор из регионов, в каждом из которых указан размер и кусок данных, если в этом регионе данные загружены. Что-нибудь типа такого (эффективность из-за копий данных пока оставим в стороне):</description>
    </item>
    
    <item>
      <title>Argument-dependent lookup в C&#43;&#43;</title>
      <link>https://aesilevich.github.io/posts/2022-12-29-adl/</link>
      <pubDate>Thu, 29 Dec 2022 12:00:00 +0700</pubDate>
      
      <guid>https://aesilevich.github.io/posts/2022-12-29-adl/</guid>
      <description>Как-то со всеми этими новыми модными штучками типа концептов и constexpr стали забываться базовые вещи из C++ и вся та жесть, которая может быть с ними связана. Вот сейчас нарвался на баг, связанный с со старым добрым Argument-dependent lookup, и задумался о том, а как вообще писать безопасный с точки зрения ADL код в библиотеках.
Допустим вы реализуете какую-то библиотеку lib1, в которой содержатся шаблонные функции для работы с произвольными определёнными пользователем типами данных.</description>
    </item>
    
    <item>
      <title>Ref-qualifiers</title>
      <link>https://aesilevich.github.io/posts/ref-qualifiers/</link>
      <pubDate>Tue, 12 Jan 2021 12:00:00 +0700</pubDate>
      
      <guid>https://aesilevich.github.io/posts/ref-qualifiers/</guid>
      <description>&lt;p&gt;Сегодня похоже день каких-то удивительных открытий.
Сейчас копался в исходниках ranges в libstdc++ и наткнулся на вот такое объявление функции-члена в классе: &lt;code&gt;void foo() &amp;amp;&amp;amp;&lt;/code&gt;.
Оказывается, что в C++11 были введены по аналогии с квалификаторами const и volatile квалификаторы rvalue и lvalue references
на функции-члены.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Определение тела friend функции внутри класса</title>
      <link>https://aesilevich.github.io/posts/inline-friend-function/</link>
      <pubDate>Tue, 12 Jan 2021 12:00:00 +0700</pubDate>
      
      <guid>https://aesilevich.github.io/posts/inline-friend-function/</guid>
      <description>&lt;p&gt;Век живи - век учись. Сейчас внезапно для себя обнаружил, что в C++ тело
friend-функции можно определять прямо внутри класса:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;cls&lt;/span&gt; {
    &lt;span style=&#34;color:#00f&#34;&gt;friend&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;void&lt;/span&gt; foo(cls &amp;amp; c) {
    }
};

&lt;span style=&#34;color:#008000&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;
cls c;
foo(c);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>User-defined сlass template argument deduction guides в C&#43;&#43;17</title>
      <link>https://aesilevich.github.io/posts/ctad-user-defined-guides/</link>
      <pubDate>Wed, 29 Jul 2020 12:00:00 +0700</pubDate>
      
      <guid>https://aesilevich.github.io/posts/ctad-user-defined-guides/</guid>
      <description>&lt;p&gt;Недавно внезапно обнаружил для себя user-defined deduction guides для вывода типов
параметров шаблонных классов в С++17.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Применение множественному наследованию в C&#43;&#43;</title>
      <link>https://aesilevich.github.io/posts/multiple-inheritance/</link>
      <pubDate>Thu, 02 Feb 2017 22:12:17 +0700</pubDate>
      
      <guid>https://aesilevich.github.io/posts/multiple-inheritance/</guid>
      <description>&lt;p&gt;Недавно понял, что похоже нашел возможно единственное полезное применение
виртуальному множественному наследованию в C++, в котором базовый класс
не является чисто абстрактным, т. е. содержит реализацию методов и
переменные-члены.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
